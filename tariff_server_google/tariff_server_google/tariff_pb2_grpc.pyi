"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import google.protobuf.empty_pb2
import grpc
from . import tariff_pb2
import typing

class TariffServiceStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    ListTariffs: grpc.UnaryUnaryMultiCallable[
        tariff_pb2.ListTariffsRequest, tariff_pb2.ListTariffsResponse
    ]
    "List the metadata of all of Bulb's tariffs."
    BatchGetTariffs: grpc.UnaryUnaryMultiCallable[
        tariff_pb2.BatchGetTariffsRequest, tariff_pb2.BatchGetTariffsResponse
    ]
    "Filter Bulb's tariffs by IDs, or by one or more metadata features."
    GetTariff: grpc.UnaryUnaryMultiCallable[
        tariff_pb2.GetTariffRequest, tariff_pb2.Tariff
    ]
    "Get a single tariff by its tariff ID."
    UpdateTariff: grpc.UnaryUnaryMultiCallable[
        tariff_pb2.UpdateTariffRequest, tariff_pb2.Tariff
    ]
    "Update the metadata of a tariff."
    StreamRatesForTariff: grpc.UnaryStreamMultiCallable[
        tariff_pb2.GetRatesForTariffRequest, tariff_pb2.PricePack
    ]
    "(Contrived) Stream the pricing of a tariff from server to client."
    StreamUpdateRatesForPriceChange: grpc.StreamUnaryMultiCallable[
        tariff_pb2.PriceChangeTariffPricePack, google.protobuf.empty_pb2.Empty
    ]
    "(Contrived) Stream new pricing for a tariff from client to server."

class TariffServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def ListTariffs(
        self, request: tariff_pb2.ListTariffsRequest, context: grpc.ServicerContext
    ) -> tariff_pb2.ListTariffsResponse:
        """List the metadata of all of Bulb's tariffs."""
        pass
    @abc.abstractmethod
    def BatchGetTariffs(
        self, request: tariff_pb2.BatchGetTariffsRequest, context: grpc.ServicerContext
    ) -> tariff_pb2.BatchGetTariffsResponse:
        """Filter Bulb's tariffs by IDs, or by one or more metadata features."""
        pass
    @abc.abstractmethod
    def GetTariff(
        self, request: tariff_pb2.GetTariffRequest, context: grpc.ServicerContext
    ) -> tariff_pb2.Tariff:
        """Get a single tariff by its tariff ID."""
        pass
    @abc.abstractmethod
    def UpdateTariff(
        self, request: tariff_pb2.UpdateTariffRequest, context: grpc.ServicerContext
    ) -> tariff_pb2.Tariff:
        """Update the metadata of a tariff."""
        pass
    @abc.abstractmethod
    def StreamRatesForTariff(
        self,
        request: tariff_pb2.GetRatesForTariffRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[tariff_pb2.PricePack]:
        """(Contrived) Stream the pricing of a tariff from server to client."""
        pass
    @abc.abstractmethod
    def StreamUpdateRatesForPriceChange(
        self,
        request_iterator: typing.Iterator[tariff_pb2.PriceChangeTariffPricePack],
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """(Contrived) Stream new pricing for a tariff from client to server."""
        pass

def add_TariffServiceServicer_to_server(
    servicer: TariffServiceServicer, server: grpc.Server
) -> None: ...
