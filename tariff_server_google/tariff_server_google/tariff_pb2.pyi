"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
from builtins import bool, float, int, type
from google.protobuf.descriptor import Descriptor, EnumDescriptor, FileDescriptor
from google.protobuf.field_mask_pb2 import FieldMask
from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer,
    RepeatedScalarFieldContainer,
)
from google.protobuf.internal.enum_type_wrapper import _EnumTypeWrapper
from google.protobuf.message import Message
from google.protobuf.timestamp_pb2 import Timestamp
from google.protobuf.wrappers_pb2 import StringValue
from typing import Iterable, NewType, Optional, Text
from typing_extensions import Literal, TypeAlias

DESCRIPTOR: FileDescriptor

class _FuelType:
    ValueType = NewType("ValueType", int)
    V: TypeAlias = ValueType

class _FuelTypeEnumTypeWrapper(_EnumTypeWrapper[_FuelType.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    UNKNOWN_FUEL: _FuelType.ValueType
    ELECTRICITY: _FuelType.ValueType
    GAS: _FuelType.ValueType

class FuelType(_FuelType, metaclass=_FuelTypeEnumTypeWrapper):
    pass

UNKNOWN_FUEL: FuelType.ValueType
ELECTRICITY: FuelType.ValueType
GAS: FuelType.ValueType

class _TariffType:
    ValueType = NewType("ValueType", int)
    V: TypeAlias = ValueType

class _TariffTypeEnumTypeWrapper(_EnumTypeWrapper[_TariffType.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    UNKNOWN_TARIFF: _TariffType.ValueType
    VARIABLE: _TariffType.ValueType
    FIXED: _TariffType.ValueType

class TariffType(_TariffType, metaclass=_TariffTypeEnumTypeWrapper):
    pass

UNKNOWN_TARIFF: TariffType.ValueType
VARIABLE: TariffType.ValueType
FIXED: TariffType.ValueType

class _PublicationStatus:
    ValueType = NewType("ValueType", int)
    V: TypeAlias = ValueType

class _PublicationStatusEnumTypeWrapper(
    _EnumTypeWrapper[_PublicationStatus.ValueType], type
):
    DESCRIPTOR: EnumDescriptor
    UNKNOWN_STATUS: _PublicationStatus.ValueType
    UNDER_CONSTRUCTION: _PublicationStatus.ValueType
    DRAFT: _PublicationStatus.ValueType
    LIVE: _PublicationStatus.ValueType
    ARCHIVED: _PublicationStatus.ValueType

class PublicationStatus(
    _PublicationStatus, metaclass=_PublicationStatusEnumTypeWrapper
):
    pass

UNKNOWN_STATUS: PublicationStatus.ValueType
UNDER_CONSTRUCTION: PublicationStatus.ValueType
DRAFT: PublicationStatus.ValueType
LIVE: PublicationStatus.ValueType
ARCHIVED: PublicationStatus.ValueType

class _PaymentMethod:
    ValueType = NewType("ValueType", int)
    V: TypeAlias = ValueType

class _PaymentMethodEnumTypeWrapper(_EnumTypeWrapper[_PaymentMethod.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    UNKNOWN_PAYMENT_METHOD: _PaymentMethod.ValueType
    DIRECT_DEBIT: _PaymentMethod.ValueType
    "..."

class PaymentMethod(_PaymentMethod, metaclass=_PaymentMethodEnumTypeWrapper):
    pass

UNKNOWN_PAYMENT_METHOD: PaymentMethod.ValueType
DIRECT_DEBIT: PaymentMethod.ValueType
"..."

class _Interval:
    ValueType = NewType("ValueType", int)
    V: TypeAlias = ValueType

class _IntervalEnumTypeWrapper(_EnumTypeWrapper[_Interval.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    UNKNOWN_INTERVAL: _Interval.ValueType
    NEVER: _Interval.ValueType
    DAILY: _Interval.ValueType
    "..."

class Interval(_Interval, metaclass=_IntervalEnumTypeWrapper):
    pass

UNKNOWN_INTERVAL: Interval.ValueType
NEVER: Interval.ValueType
DAILY: Interval.ValueType
"..."

class _Unit:
    ValueType = NewType("ValueType", int)
    V: TypeAlias = ValueType

class _UnitEnumTypeWrapper(_EnumTypeWrapper[_Unit.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    UNKNOWN_UNIT: _Unit.ValueType
    KWH: _Unit.ValueType

class Unit(_Unit, metaclass=_UnitEnumTypeWrapper):
    pass

UNKNOWN_UNIT: Unit.ValueType
KWH: Unit.ValueType

class ListTariffsRequest(Message):
    DESCRIPTOR: Descriptor

    def __init__(self) -> None: ...

class ListTariffsResponse(Message):
    DESCRIPTOR: Descriptor
    TARIFFS_FIELD_NUMBER: int

    @property
    def tariffs(self) -> RepeatedCompositeFieldContainer[Tariff]: ...
    def __init__(self, *, tariffs: Optional[Iterable[Tariff]] = ...) -> None: ...
    def ClearField(self, field_name: Literal["tariffs", b"tariffs"]) -> None: ...

class BatchGetTariffsRequest(Message):
    DESCRIPTOR: Descriptor
    TARIFF_IDS_FIELD_NUMBER: int
    FUEL_TYPES_FIELD_NUMBER: int
    TARIFF_TYPES_FIELD_NUMBER: int

    @property
    def tariff_ids(self) -> RepeatedScalarFieldContainer[Text]:
        """The tariff IDs to get. Mutually exclusive with other options."""
        pass
    @property
    def fuel_types(self) -> RepeatedScalarFieldContainer[FuelType.ValueType]:
        """Only fetch tariffs that cover at least one of these fuel types."""
        pass
    @property
    def tariff_types(self) -> RepeatedScalarFieldContainer[TariffType.ValueType]:
        """Only fetch tariffs of one of these types (fixed, variable, ...)"""
        pass
    def __init__(
        self,
        *,
        tariff_ids: Optional[Iterable[Text]] = ...,
        fuel_types: Optional[Iterable[FuelType.ValueType]] = ...,
        tariff_types: Optional[Iterable[TariffType.ValueType]] = ...
    ) -> None: ...
    def ClearField(
        self,
        field_name: Literal[
            "fuel_types",
            b"fuel_types",
            "tariff_ids",
            b"tariff_ids",
            "tariff_types",
            b"tariff_types",
        ],
    ) -> None: ...

class BatchGetTariffsResponse(Message):
    DESCRIPTOR: Descriptor
    TARIFFS_FIELD_NUMBER: int

    @property
    def tariffs(self) -> RepeatedCompositeFieldContainer[Tariff]: ...
    def __init__(self, *, tariffs: Optional[Iterable[Tariff]] = ...) -> None: ...
    def ClearField(self, field_name: Literal["tariffs", b"tariffs"]) -> None: ...

class GetTariffRequest(Message):
    DESCRIPTOR: Descriptor
    TARIFF_ID_FIELD_NUMBER: int
    tariff_id: Text
    "The tariff ID to fetch."

    def __init__(self, *, tariff_id: Text = ...) -> None: ...
    def ClearField(self, field_name: Literal["tariff_id", b"tariff_id"]) -> None: ...

class UpdateTariffRequest(Message):
    DESCRIPTOR: Descriptor
    TARIFF_FIELD_NUMBER: int
    UPDATE_MASK_FIELD_NUMBER: int

    @property
    def tariff(self) -> Tariff:
        """The tariff to update."""
        pass
    @property
    def update_mask(self) -> FieldMask: ...
    def __init__(
        self, *, tariff: Optional[Tariff] = ..., update_mask: Optional[FieldMask] = ...
    ) -> None: ...
    def HasField(
        self, field_name: Literal["tariff", b"tariff", "update_mask", b"update_mask"]
    ) -> bool: ...
    def ClearField(
        self, field_name: Literal["tariff", b"tariff", "update_mask", b"update_mask"]
    ) -> None: ...

class GetRatesForTariffRequest(Message):
    DESCRIPTOR: Descriptor
    TARIFF_ID_FIELD_NUMBER: int
    FUEL_TYPES_FIELD_NUMBER: int
    REGION_CODES_FIELD_NUMBER: int
    tariff_id: Text

    @property
    def fuel_types(self) -> RepeatedScalarFieldContainer[FuelType.ValueType]: ...
    @property
    def region_codes(self) -> RepeatedScalarFieldContainer[Text]: ...
    def __init__(
        self,
        *,
        tariff_id: Text = ...,
        fuel_types: Optional[Iterable[FuelType.ValueType]] = ...,
        region_codes: Optional[Iterable[Text]] = ...
    ) -> None: ...
    def ClearField(
        self,
        field_name: Literal[
            "fuel_types",
            b"fuel_types",
            "region_codes",
            b"region_codes",
            "tariff_id",
            b"tariff_id",
        ],
    ) -> None: ...

class PriceChangeTariffPricePack(Message):
    DESCRIPTOR: Descriptor
    PRICE_CHANGE_ID_FIELD_NUMBER: int
    TARIFF_ID_FIELD_NUMBER: int
    PRICE_PACK_FIELD_NUMBER: int
    price_change_id: Text
    tariff_id: Text

    @property
    def price_pack(self) -> PricePack: ...
    def __init__(
        self,
        *,
        price_change_id: Text = ...,
        tariff_id: Text = ...,
        price_pack: Optional[PricePack] = ...
    ) -> None: ...
    def HasField(self, field_name: Literal["price_pack", b"price_pack"]) -> bool: ...
    def ClearField(
        self,
        field_name: Literal[
            "price_change_id",
            b"price_change_id",
            "price_pack",
            b"price_pack",
            "tariff_id",
            b"tariff_id",
        ],
    ) -> None: ...

class Tariff(Message):
    DESCRIPTOR: Descriptor
    TARIFF_ID_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    FUEL_TYPES_FIELD_NUMBER: int
    PAYMENT_METHOD_FIELD_NUMBER: int
    TARIFF_TYPE_FIELD_NUMBER: int
    PUBLICATION_STATUS_FIELD_NUMBER: int
    AVAILABLE_FROM_FIELD_NUMBER: int
    AVAILABLE_TO_FIELD_NUMBER: int
    FEATURES_FIELD_NUMBER: int
    LEGACY_REFERENCE_FIELD_NUMBER: int
    tariff_id: Text
    "the UUID of the tariff"
    name: Text
    "the human-readable name for the tariff (can change)"

    @property
    def fuel_types(self) -> RepeatedScalarFieldContainer[FuelType.ValueType]:
        """which fuel types this tariff is applicable to
        (it will have prices for every fuel listed here)
        """
        pass
    payment_method: PaymentMethod.ValueType
    "what payment method this tariff is for\n    (a filter on where this tariff is used)\n    "
    tariff_type: TariffType.ValueType
    "whether the tariff is variable or fixed"
    publication_status: PublicationStatus.ValueType
    "whether the tariff is under construction, or in draft, or live"

    @property
    def available_from(self) -> Timestamp:
        """when the tariff begins being available to members"""
        pass
    @property
    def available_to(self) -> Timestamp:
        """(optional) when the tariff ceases being available to members"""
        pass
    @property
    def features(self) -> TariffFeatures:
        """a description of features enabled for the tariff"""
        pass
    @property
    def legacy_reference(self) -> StringValue:
        """the original short reference for this tariff in Junifer (if any)"""
        pass
    def __init__(
        self,
        *,
        tariff_id: Text = ...,
        name: Text = ...,
        fuel_types: Optional[Iterable[FuelType.ValueType]] = ...,
        payment_method: PaymentMethod.ValueType = ...,
        tariff_type: TariffType.ValueType = ...,
        publication_status: PublicationStatus.ValueType = ...,
        available_from: Optional[Timestamp] = ...,
        available_to: Optional[Timestamp] = ...,
        features: Optional[TariffFeatures] = ...,
        legacy_reference: Optional[StringValue] = ...
    ) -> None: ...
    def HasField(
        self,
        field_name: Literal[
            "_available_to",
            b"_available_to",
            "available_from",
            b"available_from",
            "available_to",
            b"available_to",
            "features",
            b"features",
            "legacy_reference",
            b"legacy_reference",
        ],
    ) -> bool: ...
    def ClearField(
        self,
        field_name: Literal[
            "_available_to",
            b"_available_to",
            "available_from",
            b"available_from",
            "available_to",
            b"available_to",
            "features",
            b"features",
            "fuel_types",
            b"fuel_types",
            "legacy_reference",
            b"legacy_reference",
            "name",
            b"name",
            "payment_method",
            b"payment_method",
            "publication_status",
            b"publication_status",
            "tariff_id",
            b"tariff_id",
            "tariff_type",
            b"tariff_type",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: Literal["_available_to", b"_available_to"]
    ) -> Optional[Literal["available_to"]]: ...

class TariffFeatures(Message):
    DESCRIPTOR: Descriptor
    RATE_START_TIMES_FIELD_NUMBER: int
    STANDING_CHARGE_INTERVAL_FIELD_NUMBER: int

    @property
    def rate_start_times(self) -> RepeatedScalarFieldContainer[Text]:
        """all the times of day when rates start
        there are as many rates as there are entries in this list
        e.g. ['02:00', '06:00'] for an EV tariff
        """
        pass
    standing_charge_interval: Interval.ValueType
    "the regularity at which the member is charged the standing charge"

    def __init__(
        self,
        *,
        rate_start_times: Optional[Iterable[Text]] = ...,
        standing_charge_interval: Interval.ValueType = ...
    ) -> None: ...
    def ClearField(
        self,
        field_name: Literal[
            "rate_start_times",
            b"rate_start_times",
            "standing_charge_interval",
            b"standing_charge_interval",
        ],
    ) -> None: ...

class PricePack(Message):
    """Prices for a single region and fuel type, starting from a date.
    A PricePack is flexible and requires validation to 'fit' in a tariff.
    """

    DESCRIPTOR: Descriptor
    REGION_CODE_FIELD_NUMBER: int
    FUEL_TYPE_FIELD_NUMBER: int
    EXISTING_MEMBERS_EFFECTIVE_AT_FIELD_NUMBER: int
    NEW_MEMBERS_EFFECTIVE_AT_FIELD_NUMBER: int
    UNIT_RATES_FIELD_NUMBER: int
    STANDING_CHARGE_FIELD_NUMBER: int
    region_code: Text
    "in UK this is a GSP group"
    fuel_type: FuelType.ValueType
    "which fuel type these are prices for"

    @property
    def existing_members_effective_at(self) -> Timestamp:
        """when these prices starts affecting existing members"""
        pass
    @property
    def new_members_effective_at(self) -> Timestamp:
        """when these prices starts affecting new members"""
        pass
    @property
    def unit_rates(self) -> RepeatedCompositeFieldContainer[UnitRate]:
        """the price of energy for each time interval described in TariffFeatures
        in order, e.g. if the rate_start_times are ['02:00', '06:00']
        - there are exactly two unit_rates
        - the first unit_rates item is the price for 02:00-06:00
        - the second unit_rates item is the price for 06:00-02:00
        """
        pass
    @property
    def standing_charge(self) -> StandingCharge:
        """the standing charge that applies to every meter this tariff covers
        (if we discover we want multiple StandingCharges
        we can change this to 'repeated' without breaking wire compatibility
        but old clients would only 'see' the last one in the list)
        """
        pass
    def __init__(
        self,
        *,
        region_code: Text = ...,
        fuel_type: FuelType.ValueType = ...,
        existing_members_effective_at: Optional[Timestamp] = ...,
        new_members_effective_at: Optional[Timestamp] = ...,
        unit_rates: Optional[Iterable[UnitRate]] = ...,
        standing_charge: Optional[StandingCharge] = ...
    ) -> None: ...
    def HasField(
        self,
        field_name: Literal[
            "_standing_charge",
            b"_standing_charge",
            "existing_members_effective_at",
            b"existing_members_effective_at",
            "new_members_effective_at",
            b"new_members_effective_at",
            "standing_charge",
            b"standing_charge",
        ],
    ) -> bool: ...
    def ClearField(
        self,
        field_name: Literal[
            "_standing_charge",
            b"_standing_charge",
            "existing_members_effective_at",
            b"existing_members_effective_at",
            "fuel_type",
            b"fuel_type",
            "new_members_effective_at",
            b"new_members_effective_at",
            "region_code",
            b"region_code",
            "standing_charge",
            b"standing_charge",
            "unit_rates",
            b"unit_rates",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: Literal["_standing_charge", b"_standing_charge"]
    ) -> Optional[Literal["standing_charge"]]: ...

class UnitRate(Message):
    DESCRIPTOR: Descriptor
    CENTS_FIELD_NUMBER: int
    UNIT_FIELD_NUMBER: int
    START_TIME_FIELD_NUMBER: int
    cents: float
    "cents per unit (e.g. pence per kWh)"
    unit: Unit.ValueType
    "unit of energy"
    start_time: Text
    "empty for single rate, otherwise when in the day the rate starts applying\n    e.g. '02:00'\n    "

    def __init__(
        self,
        *,
        cents: float = ...,
        unit: Unit.ValueType = ...,
        start_time: Optional[Text] = ...
    ) -> None: ...
    def HasField(
        self,
        field_name: Literal["_start_time", b"_start_time", "start_time", b"start_time"],
    ) -> bool: ...
    def ClearField(
        self,
        field_name: Literal[
            "_start_time",
            b"_start_time",
            "cents",
            b"cents",
            "start_time",
            b"start_time",
            "unit",
            b"unit",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: Literal["_start_time", b"_start_time"]
    ) -> Optional[Literal["start_time"]]: ...

class StandingCharge(Message):
    DESCRIPTOR: Descriptor
    CENTS_FIELD_NUMBER: int
    INTERVAL_FIELD_NUMBER: int
    cents: float
    "cents per interval"
    interval: Interval.ValueType
    "the regularity at which the member is charged the standing charge"

    def __init__(
        self, *, cents: float = ..., interval: Interval.ValueType = ...
    ) -> None: ...
    def ClearField(
        self, field_name: Literal["cents", b"cents", "interval", b"interval"]
    ) -> None: ...

class PriceChange(Message):
    DESCRIPTOR: Descriptor
    PRICE_CHANGE_ID_FIELD_NUMBER: int
    CREATED_AT_FIELD_NUMBER: int
    EXISTING_MEMBERS_EFFECTIVE_AT_FIELD_NUMBER: int
    NEW_MEMBERS_EFFECTIVE_AT_FIELD_NUMBER: int
    PUBLISHED_AT_FIELD_NUMBER: int
    REVIEWS_FIELD_NUMBER: int
    ORCHESTRATION_STEPS_FIELD_NUMBER: int
    price_change_id: Text
    "the UUID of the price change"

    @property
    def created_at(self) -> Timestamp:
        """when the price change was created"""
        pass
    @property
    def existing_members_effective_at(self) -> Timestamp:
        """when the price changes (if published) starts affecting existing members"""
        pass
    @property
    def new_members_effective_at(self) -> Timestamp:
        """when the price changes (if published) starts affecting new members"""
        pass
    @property
    def published_at(self) -> Timestamp:
        """when the price change was published
        (if it hasn't got a published_at, it's in draft)
        """
        pass
    @property
    def reviews(self) -> RepeatedCompositeFieldContainer[Review]:
        """what reviews have been requested and their status"""
        pass
    @property
    def orchestration_steps(self) -> OrchestrationSteps:
        """how much progress has been made with applying the published price change"""
        pass
    def __init__(
        self,
        *,
        price_change_id: Text = ...,
        created_at: Optional[Timestamp] = ...,
        existing_members_effective_at: Optional[Timestamp] = ...,
        new_members_effective_at: Optional[Timestamp] = ...,
        published_at: Optional[Timestamp] = ...,
        reviews: Optional[Iterable[Review]] = ...,
        orchestration_steps: Optional[OrchestrationSteps] = ...
    ) -> None: ...
    def HasField(
        self,
        field_name: Literal[
            "_published_at",
            b"_published_at",
            "created_at",
            b"created_at",
            "existing_members_effective_at",
            b"existing_members_effective_at",
            "new_members_effective_at",
            b"new_members_effective_at",
            "orchestration_steps",
            b"orchestration_steps",
            "published_at",
            b"published_at",
        ],
    ) -> bool: ...
    def ClearField(
        self,
        field_name: Literal[
            "_published_at",
            b"_published_at",
            "created_at",
            b"created_at",
            "existing_members_effective_at",
            b"existing_members_effective_at",
            "new_members_effective_at",
            b"new_members_effective_at",
            "orchestration_steps",
            b"orchestration_steps",
            "price_change_id",
            b"price_change_id",
            "published_at",
            b"published_at",
            "reviews",
            b"reviews",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: Literal["_published_at", b"_published_at"]
    ) -> Optional[Literal["published_at"]]: ...

class Review(Message):
    DESCRIPTOR: Descriptor
    REVIEWER_FIELD_NUMBER: int
    APPROVED_FIELD_NUMBER: int
    reviewer: Text
    approved: bool

    def __init__(self, *, reviewer: Text = ..., approved: bool = ...) -> None: ...
    def ClearField(
        self, field_name: Literal["approved", b"approved", "reviewer", b"reviewer"]
    ) -> None: ...

class OrchestrationSteps(Message):
    DESCRIPTOR: Descriptor
    JUNIFER_UPDATED_FIELD_NUMBER: int
    PCWS_UPDATED_FIELD_NUMBER: int
    COMMS_SENT_FIELD_NUMBER: int
    PAY_REVIEW_COMPLETED_FIELD_NUMBER: int
    junifer_updated: bool
    pcws_updated: bool
    comms_sent: bool
    pay_review_completed: bool

    def __init__(
        self,
        *,
        junifer_updated: bool = ...,
        pcws_updated: bool = ...,
        comms_sent: bool = ...,
        pay_review_completed: bool = ...
    ) -> None: ...
    def ClearField(
        self,
        field_name: Literal[
            "comms_sent",
            b"comms_sent",
            "junifer_updated",
            b"junifer_updated",
            "pay_review_completed",
            b"pay_review_completed",
            "pcws_updated",
            b"pcws_updated",
        ],
    ) -> None: ...
