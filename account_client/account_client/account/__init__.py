# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: account.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncIterator, Dict, List, Optional

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


class Territory(betterproto.Enum):
    GB = 0
    ES = 1
    FR = 2
    US_TX = 3


@dataclass(eq=False, repr=False)
class GetAccountRequest(betterproto.Message):
    account_id: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class GetAccountResponse(betterproto.Message):
    account_id: int = betterproto.int64_field(1)
    territory: "Territory" = betterproto.enum_field(2)
    industry_ids: List[int] = betterproto.int64_field(3)
    email: Optional[str] = betterproto.string_field(4, optional=True, group="_email")


@dataclass(eq=False, repr=False)
class StreamIndustryIdsRequest(betterproto.Message):
    account_id: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class StreamIndustryIdsResponse(betterproto.Message):
    industry_id: int = betterproto.int64_field(1)


class AccountStub(betterproto.ServiceStub):
    async def get_account(self, *, account_id: int = 0) -> "GetAccountResponse":

        request = GetAccountRequest()
        request.account_id = account_id

        return await self._unary_unary(
            "/account.Account/GetAccount", request, GetAccountResponse
        )

    async def stream_industry_ids(
        self, *, account_id: int = 0
    ) -> AsyncIterator["StreamIndustryIdsResponse"]:

        request = StreamIndustryIdsRequest()
        request.account_id = account_id

        async for response in self._unary_stream(
            "/account.Account/StreamIndustryIds",
            request,
            StreamIndustryIdsResponse,
        ):
            yield response


class AccountBase(ServiceBase):
    async def get_account(self, account_id: int) -> "GetAccountResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stream_industry_ids(
        self, account_id: int
    ) -> AsyncIterator["StreamIndustryIdsResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_account(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "account_id": request.account_id,
        }

        response = await self.get_account(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_stream_industry_ids(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "account_id": request.account_id,
        }

        await self._call_rpc_handler_server_stream(
            self.stream_industry_ids,
            stream,
            request_kwargs,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/account.Account/GetAccount": grpclib.const.Handler(
                self.__rpc_get_account,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetAccountRequest,
                GetAccountResponse,
            ),
            "/account.Account/StreamIndustryIds": grpclib.const.Handler(
                self.__rpc_stream_industry_ids,
                grpclib.const.Cardinality.UNARY_STREAM,
                StreamIndustryIdsRequest,
                StreamIndustryIdsResponse,
            ),
        }
