syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";

package bulb.tariff;

service TariffService {
  rpc ListTariffs (ListTariffsRequest) returns (ListTariffsResponse) {}))
  rpc BatchGetTariffs (BatchGetTariffsRequest) returns (BatchGetTariffsResponse) {}
  rpc GetTariff (GetTariffRequest) returns (Tariff) {}
  rpc UpdateTariff (UpdateTariffRequest) returns (Tariff) {}
}

message Ids {
  repeated string ids = 1;
}

message References {
  repeated string references = 1;
}

message ListTariffsRequest {}

message ListTariffsResponse {
  repeated Tariff tariffs = 1;
}

message BatchGetTariffsRequest {
  repeated string ids = 1;
  repeated string references = 2;
  repeated string fuel_types = 3;
  repeated string tariff_types = 4;
}

message BatchGetTariffsResponse {
  repeated Tariff tariffs = 1;
}

message GetTariffRequest {
  string id = 1;
}


message UpdateTariffRequest {
  Tariff tariff = 1;
  google.protobuf.FieldMask update_mask = 2;
}


enum FuelType {
  UNKNOWN_FUEL = 0;
  ELECTRICITY = 1;
  GAS = 2;
}

enum TariffType {
  UNKNOWN_TARIFF = 0;
  VARIABLE = 1;
  FIXED = 2;
}

enum PublicationStatus {
  UNKNOWN_STATUS = 0;
  UNDER_CONSTRUCTION = 1;
  DRAFT = 2;
  LIVE = 3;
  ARCHIVED = 4;
}

enum PaymentMethod {
  UNKNOWN_PAYMENT_METHOD = 0;
  DIRECT_DEBIT = 1;
  // ...
}

message Tariff {
  // the unique short code for the tariff (cannot be changed)
  // TODO work out how this interacts with multiple Junifer tariffs -> one Iris tariff
  string id = 1;
  // the human-readable name for the tariff (can change)
  string name = 2;
  // which fuel types this tariff is applicable to
  // (it will have prices for every fuel listed here)
  repeated FuelType fuel_types = 3;
  // what payment method this tariff is for
  // (a filter on where this tariff is used)
  PaymentMethod payment_method = 4;
  // whether the tariff is variable or fixed
  TariffType tariff_type = 5;
  // whether the tariff is under construction, or in draft, or live
  PublicationStatus publication_status = 6;
  // when the tariff begins being available to members
  google.protobuf.Timestamp available_from = 7;
  // (optional) when the tariff ceases being available to members
  optional google.protobuf.Timestamp available_to = 8;
  // a description of features enabled for the tariff
  TariffFeatures features = 9;
}

enum Interval {
  UNKNOWN_INTERVAL = 0;
  NEVER = 1;
  DAILY = 2;
  // ...
}

message TariffFeatures {
  // all the times of day when rates start
  // there are as many rates as there are entries in this list
  // e.g. ['02:00', '06:00'] for an EV tariff
  repeated string rate_start_times = 1;
  // the regularity at which the member is charged the standing charge
  Interval standing_charge_interval = 2;
}

// The pricing of a Tariff in a particular region.
message TariffRegion {
  // in UK this is a GSP group
  string region_name = 1;
  // the map of FuelTypes to lists of PricePacks
  // (can't use map<...> because of enum and repeated)
  PricePacksForFuel price_packs_for_fuel = 2;
}

message PricePacksForFuel {
  // which fuel type the PricePacks are for
  FuelType fuel_type = 1;
  // all the prices for a region and fuel
  // (PricePacks contain when they apply from)
  repeated PricePack price_packs = 2;
  // Which Junifer tariffs are encompassed by this tariff-region-fuel?? TODO sanity check
  repeated string legacy_references = 3;
}

// Prices for a single region and fuel type, starting from a date.
// A PricePack is flexible and requires validation to 'fit' in a tariff.
message PricePack {
  // when these prices starts affecting existing members
  google.protobuf.Timestamp existing_members_effective_at = 1;
  // when these prices starts affecting new members
  google.protobuf.Timestamp new_members_effective_at = 2;
  // the price of energy for each time interval described in TariffFeatures
  // in order, e.g. if the rate_start_times are ['02:00', '06:00']
  // - there are exactly two unit_rates
  // - the first unit_rates item is the price for 02:00-06:00
  // - the second unit_rates item is the price for 06:00-02:00
  repeated UnitRate unit_rates = 3;
  // the standing charge that applies to every meter this tariff covers
  // (if we discover we want multiple StandingCharges
  // we can change this to 'repeated' without breaking wire compatibility
  // but old clients would only 'see' the last one in the list)
  optional StandingCharge standing_charges = 4;
}

enum Unit {
  UNKNOWN_UNIT = 0;
  KWH = 1;
}

message UnitRate {
  // cents per unit (e.g. pence per kWh)
  double cents = 1;
  // unit of energy
  Unit unit = 2;
  // empty for single rate, otherwise when in the day the rate starts applying
  // e.g. '02:00'
  optional string start_time = 3;
  // empty for single rate, otherwise when in the day the rate stops applying
  // (this can be 'before' start_time, in which case it wraps around midnight)
  // e.g. '06:00'
  optional string end_time = 4;
}

message StandingCharge {
  // cents per interval
  double cents = 1;
  // the regularity at which the member is charged the standing charge
  Interval interval = 2;
}

message PriceChange {
  // when the price change was created
  google.protobuf.Timestamp created_at = 1;
  // when the price changes (if published) starts affecting existing members
  google.protobuf.Timestamp existing_members_effective_at = 2;
  // when the price changes (if published) starts affecting new members
  google.protobuf.Timestamp new_members_effective_at = 3;
  // when the price change was published
  // (if it hasn't got a published_at, it's in draft)
  optional google.protobuf.Timestamp published_at = 4;
  // TODO something something actions/approval
  // how much progress has been made with applying the published price change
  OrchestrationSteps orchestration_steps = 5;
  // all the actual new pricing information
  // TODO try to name this better
  repeated PriceChangeTariffRegion price_changes_by_tariff_region = 6;
}

// TODO decide if we even want to have anything for this yet
message OrchestrationSteps {
  bool junifer_updated = 1;
  bool pcws_updated = 2;
  bool comms_sent = 3;
  bool pay_review_completed = 4;
}

// TODO decide if this should have more hierarchy
message PriceChangeTariffRegion {
  // the unique short code of a tariff
  string tariff_id = 1;
  // in UK this is a GSP group
  string region_name = 2;
  // the map of FuelTypes to new PricePacks
  repeated PricePacksForFuel price_packs_for_fuel = 3;
}

message PricePackForFuel {
  // which fuel type the PricePack is for
  FuelType fuel_type = 1;
  // the new price for the region and fuel
  repeated PricePack price_packs = 2;
}
